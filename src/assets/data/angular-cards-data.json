[
  {
    "topic": "Components",
    "question": "What is an Angular component?",
    "answer": "A component controls a section of the UI using an HTML template, CSS, and TypeScript logic. It is defined using the `@Component` decorator.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Components",
    "question": "How do you define a component in Angular?",
    "answer": "Using the `@Component` decorator with selector, templateUrl or template, and styleUrls.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Modules",
    "question": "What is the role of NgModule?",
    "answer": "`NgModule` is a decorator that defines a module which groups components, services, and other modules together.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Modules",
    "question": "What is the root module in every Angular app?",
    "answer": "`AppModule` is the root module and is bootstrapped to launch the app.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Services & DI",
    "question": "What is Dependency Injection in Angular?",
    "answer": "A design pattern where services or dependencies are provided to components rather than created inside them.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Services & DI",
    "question": "How do you create and inject a service in Angular?",
    "answer": "Create with `ng generate service myService`, and inject using the constructor: `constructor(private myService: MyService) {}`",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Routing",
    "question": "How do you configure routing in Angular?",
    "answer": "Using the `RouterModule.forRoot(routes)` in `AppModule` and defining routes as an array of path-component pairs.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Routing",
    "question": "How do you navigate programmatically in Angular?",
    "answer": "Use the `Router` service: `this.router.navigate(['/path']);`",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Directives",
    "question": "What is a structural directive in Angular?",
    "answer": "A directive that changes the DOM layout by adding/removing elements (e.g., `*ngIf`, `*ngFor`).",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Directives",
    "question": "What is the purpose of `*ngIf`?",
    "answer": "It conditionally includes or removes elements in the DOM based on a Boolean expression.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Lifecycle",
    "question": "What is ngOnInit?",
    "answer": "`ngOnInit()` is a lifecycle hook called after the component's constructor and after the first `ngOnChanges()`.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Lifecycle",
    "question": "When is ngOnDestroy called?",
    "answer": "`ngOnDestroy()` is called just before the component is removed from the DOM. Useful for cleanup.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Forms",
    "question": "What is the difference between template-driven and reactive forms?",
    "answer": "Template-driven forms are defined in HTML using directives, while reactive forms are defined in TypeScript using FormControl and FormGroup.",
    "difficulty": "hard",
    "color": "danger"
  },
  {
    "topic": "Forms",
    "question": "How do you bind an input field to a variable in template-driven forms?",
    "answer": "Use `[(ngModel)]` two-way data binding.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "RxJS",
    "question": "What is an Observable in Angular?",
    "answer": "An Observable represents a stream of asynchronous data that can be subscribed to.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "RxJS",
    "question": "What does the `subscribe()` method do?",
    "answer": "It allows you to listen to values emitted by an Observable and take action when values are received.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "RxJS",
    "question": "What is the `pipe()` method used for?",
    "answer": "It chains RxJS operators to transform the stream (e.g., `map`, `filter`, `switchMap`).",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "RxJS",
    "question": "What does `switchMap` do?",
    "answer": "`switchMap` cancels the previous inner Observable and subscribes to the new one. Useful for search/autocomplete.",
    "difficulty": "hard",
    "color": "danger"
  },
  {
    "topic": "CLI",
    "question": "How do you generate a component using Angular CLI?",
    "answer": "`ng generate component component-name` or shorthand `ng g c component-name`",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "CLI",
    "question": "How do you create a new Angular project?",
    "answer": "`ng new project-name`",
    "difficulty": "easy",
    "color": "success"
  }
]
