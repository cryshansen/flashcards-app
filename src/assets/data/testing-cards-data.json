[
  {
    "topic": "Angular Testing",
    "question": "What is the purpose of Jasmine in Angular testing?",
    "answer": "<strong>Jasmine</strong> is a <strong>behavior-driven development</strong> framework used to <u>write</u> <strong>unit tests</strong> in Angular. It <u>provides</u> <strong>describe()</strong>, <strong>it()</strong>, and <strong>expect()</strong> functions to <u>define</u> and <u>assert</u> test behavior.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Angular Testing",
    "question": "What is the purpose of TestBed in Angular?",
    "answer": "<strong>TestBed</strong> is Angular’s primary <strong>testing utility</strong> that <u>creates</u> a <strong>testing module</strong> to <u>configure</u> and <u>instantiate</u> components, directives, and services in isolation.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Angular Testing",
    "question": "How do you test an Angular service?",
    "answer": "You <u>use</u> <strong>TestBed.configureTestingModule()</strong> to <u>provide</u> the service, then <u>inject</u> it with <strong>TestBed.inject()</strong> and <u>assert</u> behavior using <strong>expect()</strong>.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Angular Testing",
    "question": "What is a spy in Jasmine testing?",
    "answer": "A <strong>spy</strong> is a mock function that <u>tracks</u> calls and <u>allows</u> you to <u>replace</u> real method implementations, <u>use</u> <strong>spyOn(object, 'method')</strong> to <u>monitor</u> interactions.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Angular Testing",
    "question": "What’s the difference between unit testing and integration testing in Angular?",
    "answer": "<strong>Unit testing</strong> <u>tests</u> a single <strong>component</strong> or <strong>service</strong> in isolation, while <strong>integration testing</strong> <u>validates</u> multiple components or modules <em>working together</em>.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Angular Testing",
    "question": "What is Karma’s role in Angular testing?",
    "answer": "<strong>Karma</strong> is a <strong>test runner</strong> that <u>executes</u> tests in real browsers, <u>reports</u> results, and <u>watches</u> for file changes to <u>re-run</u> tests automatically.",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Angular Testing",
    "question": "How do you test DOM interactions in Angular components?",
    "answer": "You <u>use</u> <strong>fixture.debugElement</strong> to <u>query</u> elements, <u>trigger</u> events with <strong>dispatchEvent()</strong>, and <u>verify</u> results using <strong>expect()</strong>.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Angular Testing",
    "question": "What is async testing in Angular?",
    "answer": "<strong>Async testing</strong> <u>handles</u> asynchronous code by <u>using</u> helpers like <strong>async()</strong>, <strong>fakeAsync()</strong>, and <strong>tick()</strong> to <u>control</u> execution flow in tests.",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Angular Testing",
    "question": "What is the difference between fakeAsync and async in Angular testing?",
    "answer": "<strong>async()</strong> <u>wraps</u> a test in an asynchronous zone and <u>waits</u> for tasks to <u>complete</u>, while <strong>fakeAsync()</strong> <u>simulates</u> async passage of time and <u>requires</u> manual <strong>tick()</strong> calls.",
    "difficulty": "hard",
    "color": "danger"
  },
  {
    "topic": "Angular Testing",
    "question": "How do you mock HTTP requests in Angular unit tests?",
    "answer": "You <u>use</u> <strong>HttpClientTestingModule</strong> with <strong>HttpTestingController</strong> to <u>intercept</u> HTTP calls, <u>flush</u> mock responses, and <u>verify</u> no pending requests remain.",
    "difficulty": "hard",
    "color": "danger"
  }
]
